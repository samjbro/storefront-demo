type Query {
  me: Customer!
  products(data: ProductSearchFields!): ProductsPayload!
  product(id: String!): Product
  departments: [Department!]!
  categories: [Category]!
}

type Mutation {
  login (data: LoginCustomerInput!): AuthPayload!
  register (data: RegisterCustomerInput!): AuthPayload!
}

type Customer {
  customer_id: ID!
  name: String!
  email: String!
  password: String!
  day_phone: String
  eve_phone: String
  mob_phone: String
}

type Product {
  product_id: ID!
  name: String!
  description: String!
  price: String!
  discounted_price: String!
  thumbnail: String!
  image: String!
  image_2: String!
  attributes: [Attribute!]!
  reviews: [Review!]!
}

type Attribute {
  attribute_value_id: ID!
  attribute_name: String!
  attribute_value: String!
}

type Review {
  name: String!
  review: String!
  rating: Int!
  created_on: String!
}

type Department {
  department_id: ID!
  name: String!
  description: String!
}
type Category {
  category_id: ID!
  name: String!
  description: String!
}

type AuthPayload {
  token: String!
  customer: Customer!
}

type ProductsPayload {
  count: String!
  product_list: [Product!]!
}

input LoginCustomerInput {
  email: String!
  password: String!
}

input RegisterCustomerInput {
  name: String!
  email: String!
  password: String!
}

input ProductSearchFields {
  page: Int
  limit: Int
  query_string: String
  department_id: Int
  category_id: Int
}